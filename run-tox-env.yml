parameters:
  jobs: []
  tox_version: 'tox'

jobs:
- ${{ each job in parameters.jobs }}:
  - job: ${{ job.key }}
    strategy:
      matrix:
        ${{ each env in job.value.toxenvs }}:
          ${{ env }}:
            TOXENV: ${{ env }}
            ${{ if job.value.py }}:
              py: ${{ job.value.py }}
            ${{ if not(job.value.py) }}:
              ${{ if or(eq(env, 'py27'), startsWith(env, 'py27-')) }}:
                py: '2.7'
                PYTHONWARNINGS: 'ignore:::pip._internal.cli.base_command'
              ${{ if or(eq(env, 'py34'), startsWith(env, 'py34-')) }}:
                py: '3.4'
                PYTHONWARNINGS: 'ignore:::pip._internal.cli.base_command'
              ${{ if or(eq(env, 'py35'), startsWith(env, 'py35-')) }}:
                py: '3.5'
              ${{ if or(eq(env, 'py36'), startsWith(env, 'py36-')) }}:
                py: '3.6'
              ${{ if or(eq(env, 'py37'), startsWith(env, 'py37-')) }}:
                py: '3.7'
              ${{ if or(eq(env, 'pypy'), startsWith(env, 'pypy-')) }}:
                py: 'pypy2'
                PYTHONWARNINGS: 'ignore:::pip._internal.cli.base_command'
              ${{ if or(eq(env, 'pypy3'), startsWith(env, 'pypy3-')) }}:
                py: 'pypy3'
              ${{ if or(eq(env, 'py38'), startsWith(env, 'py38-')) }}:
                py: '3.7'
                ispy38: true
              ${{ if or(eq(env, 'jython'), startsWith(env, 'jython-')) }}:
                py: '3.7'
                is_jython: true

    pool:
      ${{ if job.value.image }}:
        vmImage: ${{ job.value.image }}
      ${{ if not(job.value.image) }}:
        ${{ if eq(job.key, 'linux') }}:
          vmImage: 'Ubuntu-16.04'
        ${{ if eq(job.key, 'windows') }}:
          vmImage: 'windows-2019'
        ${{ if eq(job.key, 'macOs') }}:
          vmImage: 'macOS-10.14'
        ${{ if notIn(job.key, 'macOs', 'linux', 'windows') }}:
          vmImage: 'Ubuntu-16.04'

    variables:
      TMPDIR: $(Build.BinariesDirectory)
      PIP_NO_WARN_SCRIPT_LOCATION: '0'
      PIP_DISABLE_PIP_VERSION_CHECK: '1'
      ${{ if job.value.env }}:
        ${{ job.value.env }}

    steps:
    - checkout: self
      submodules: true
    - task: UsePythonVersion@0
      displayName: provision python $(py)
      inputs:
        versionSpec: $(py)
        architecture: ${{ coalesce(job.value.architecture, 'x64') }}

    - script: |
        sudo add-apt-repository ppa:deadsnakes
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends python3.8-dev python3.8-distutils
      condition: variables.ispy38
      displayName: 'provision python 3.8'

    - script: |
        wget http://search.maven.org/remotecontent?filepath=org/python/jython-installer/2.7.1/jython-installer-2.7.1.jar -O $(Agent.ToolsDirectory)/jython.jar
        java -jar $(Agent.ToolsDirectory)/jython.jar -sd $(Agent.ToolsDirectory)/jython -e demo src doc
        echo "##vso[task.setvariable variable=PATH]$(Agent.ToolsDirectory)/jython/bin:$(PATH)"
      condition: variables.is_jython
      displayName: 'provision jython'

    - script: 'python -c "import sys; print(sys.version); print(sys.executable);"'
      displayName: show python information

    - script: ${{ format('python -m pip install -U --user --force-reinstall {0}', parameters.tox_version) }}
      displayName: install tox

    - ${{ if job.value.before }}:
      - ${{ job.value.before }}

    - script: 'python -m tox --notest -vv --skip-missing-interpreters false'
      displayName: generate tox test environment

    - script: 'python -m tox'
      displayName: run tox test environment

    - bash: 'printf "##vso[task.setVariable variable=junit]" && ([ -f junit.$(TOXENV).xml ] && printf yes || printf no) && echo ""'
      condition: always()
      displayName: check if junit file present
      workingDirectory: '$(System.DefaultWorkingDirectory)/.tox'

    - task: PublishTestResults@2
      displayName: publish test results via junit
      condition: eq(variables.junit, 'yes')
      inputs:
        testResultsFormat: "JUnit"
        testResultsFiles: '.tox/junit.$(TOXENV).xml'
        testRunTitle: 'junit-$(Agent.OS)-$(Agent.OSArchitecture)-$(TOXENV)'

    - ${{ if job.value.coverage }}:
      - script:  ${{ format('python -m tox -e {0}', job.value.coverage) }}
        displayName: create coverag report

    - bash: 'printf "##vso[task.setVariable variable=coverage]" && ([ -f coverage.xml -o -f .coverage ] && printf yes || printf no) && echo ""'
      displayName: check if coverage file present
      condition: always()
      workingDirectory: '$(System.DefaultWorkingDirectory)/.tox'

    - task: CopyFiles@2
      displayName: move coverage files into staging area
      condition: eq(variables.coverage, 'yes')
      inputs:
        sourceFolder: $(System.DefaultWorkingDirectory)/.tox
        contents: |
          .coverage
          coverage.xml
        targetFolder: $(Build.StagingDirectory)

    - task: PublishBuildArtifacts@1
      displayName: publish coverage file
      condition: eq(variables.coverage, 'yes')
      inputs:
        pathtoPublish: $(Build.ArtifactStagingDirectory)
        ArtifactName: 'coverage-$(Agent.OS)-$(Agent.OSArchitecture)-$(TOXENV)'
